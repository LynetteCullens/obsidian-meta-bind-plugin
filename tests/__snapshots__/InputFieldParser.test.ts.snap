// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ast parser tests complex closure test 2 1`] = `
ParsingTree {
  "children": [
    PT_Literal {
      "str": "hello world[this is a message to all people]test(a)b",
      "token": {
        "literal": "hello world",
        "range": {
          "from": 0,
          "to": 10,
        },
        "type": "WORD",
      },
      "type": "LITERAL",
    },
    PT_Closure {
      "children": [
        PT_Literal {
          "str": "hello world[this is a message to all people]test(a)b",
          "token": {
            "literal": "this is a message to all people",
            "range": {
              "from": 12,
              "to": 42,
            },
            "type": "WORD",
          },
          "type": "LITERAL",
        },
      ],
      "endLiteral": PT_Literal {
        "str": "hello world[this is a message to all people]test(a)b",
        "token": {
          "literal": "]",
          "range": {
            "from": 43,
            "to": 43,
          },
          "type": "]",
        },
        "type": "LITERAL",
      },
      "startLiteral": PT_Literal {
        "str": "hello world[this is a message to all people]test(a)b",
        "token": {
          "literal": "[",
          "range": {
            "from": 11,
            "to": 11,
          },
          "type": "[",
        },
        "type": "LITERAL",
      },
      "str": "hello world[this is a message to all people]test(a)b",
      "type": "CLOSURE",
    },
    PT_Literal {
      "str": "hello world[this is a message to all people]test(a)b",
      "token": {
        "literal": "test",
        "range": {
          "from": 44,
          "to": 47,
        },
        "type": "WORD",
      },
      "type": "LITERAL",
    },
    PT_Closure {
      "children": [
        PT_Literal {
          "str": "hello world[this is a message to all people]test(a)b",
          "token": {
            "literal": "a",
            "range": {
              "from": 49,
              "to": 49,
            },
            "type": "WORD",
          },
          "type": "LITERAL",
        },
      ],
      "endLiteral": PT_Literal {
        "str": "hello world[this is a message to all people]test(a)b",
        "token": {
          "literal": ")",
          "range": {
            "from": 50,
            "to": 50,
          },
          "type": ")",
        },
        "type": "LITERAL",
      },
      "startLiteral": PT_Literal {
        "str": "hello world[this is a message to all people]test(a)b",
        "token": {
          "literal": "(",
          "range": {
            "from": 48,
            "to": 48,
          },
          "type": "(",
        },
        "type": "LITERAL",
      },
      "str": "hello world[this is a message to all people]test(a)b",
      "type": "CLOSURE",
    },
    PT_Literal {
      "str": "hello world[this is a message to all people]test(a)b",
      "token": {
        "literal": "b",
        "range": {
          "from": 51,
          "to": 51,
        },
        "type": "WORD",
      },
      "type": "LITERAL",
    },
  ],
  "str": "hello world[this is a message to all people]test(a)b",
  "tokens": [
    {
      "literal": "hello world",
      "range": {
        "from": 0,
        "to": 10,
      },
      "type": "WORD",
    },
    {
      "literal": "[",
      "range": {
        "from": 11,
        "to": 11,
      },
      "type": "[",
    },
    {
      "literal": "this is a message to all people",
      "range": {
        "from": 12,
        "to": 42,
      },
      "type": "WORD",
    },
    {
      "literal": "]",
      "range": {
        "from": 43,
        "to": 43,
      },
      "type": "]",
    },
    {
      "literal": "test",
      "range": {
        "from": 44,
        "to": 47,
      },
      "type": "WORD",
    },
    {
      "literal": "(",
      "range": {
        "from": 48,
        "to": 48,
      },
      "type": "(",
    },
    {
      "literal": "a",
      "range": {
        "from": 49,
        "to": 49,
      },
      "type": "WORD",
    },
    {
      "literal": ")",
      "range": {
        "from": 50,
        "to": 50,
      },
      "type": ")",
    },
    {
      "literal": "b",
      "range": {
        "from": 51,
        "to": 51,
      },
      "type": "WORD",
    },
    {
      "literal": "eof",
      "range": {
        "from": 52,
        "to": 52,
      },
      "type": "EOF",
    },
  ],
  "type": "ROOT",
}
`;

exports[`ast parser tests simple closure test 1`] = `
ParsingTree {
  "children": [
    PT_Literal {
      "str": "hello world(this is a message to all people)",
      "token": {
        "literal": "hello world",
        "range": {
          "from": 0,
          "to": 10,
        },
        "type": "WORD",
      },
      "type": "LITERAL",
    },
    PT_Closure {
      "children": [
        PT_Literal {
          "str": "hello world(this is a message to all people)",
          "token": {
            "literal": "this is a message to all people",
            "range": {
              "from": 12,
              "to": 42,
            },
            "type": "WORD",
          },
          "type": "LITERAL",
        },
      ],
      "endLiteral": PT_Literal {
        "str": "hello world(this is a message to all people)",
        "token": {
          "literal": ")",
          "range": {
            "from": 43,
            "to": 43,
          },
          "type": ")",
        },
        "type": "LITERAL",
      },
      "startLiteral": PT_Literal {
        "str": "hello world(this is a message to all people)",
        "token": {
          "literal": "(",
          "range": {
            "from": 11,
            "to": 11,
          },
          "type": "(",
        },
        "type": "LITERAL",
      },
      "str": "hello world(this is a message to all people)",
      "type": "CLOSURE",
    },
  ],
  "str": "hello world(this is a message to all people)",
  "tokens": [
    {
      "literal": "hello world",
      "range": {
        "from": 0,
        "to": 10,
      },
      "type": "WORD",
    },
    {
      "literal": "(",
      "range": {
        "from": 11,
        "to": 11,
      },
      "type": "(",
    },
    {
      "literal": "this is a message to all people",
      "range": {
        "from": 12,
        "to": 42,
      },
      "type": "WORD",
    },
    {
      "literal": ")",
      "range": {
        "from": 43,
        "to": 43,
      },
      "type": ")",
    },
    {
      "literal": "eof",
      "range": {
        "from": 44,
        "to": 44,
      },
      "type": "EOF",
    },
  ],
  "type": "ROOT",
}
`;

exports[`ast parser tests simple input field declaration 1 1`] = `
ParsingTree {
  "children": [
    PT_Literal {
      "str": "INPUT[text:nested['object']]",
      "token": {
        "literal": "INPUT",
        "range": {
          "from": 0,
          "to": 4,
        },
        "type": "WORD",
      },
      "type": "LITERAL",
    },
    PT_Closure {
      "children": [
        PT_Literal {
          "str": "INPUT[text:nested['object']]",
          "token": {
            "literal": "text",
            "range": {
              "from": 6,
              "to": 9,
            },
            "type": "WORD",
          },
          "type": "LITERAL",
        },
        PT_Literal {
          "str": "INPUT[text:nested['object']]",
          "token": {
            "literal": ":",
            "range": {
              "from": 10,
              "to": 10,
            },
            "type": ":",
          },
          "type": "LITERAL",
        },
        PT_Literal {
          "str": "INPUT[text:nested['object']]",
          "token": {
            "literal": "nested",
            "range": {
              "from": 11,
              "to": 16,
            },
            "type": "WORD",
          },
          "type": "LITERAL",
        },
        PT_Closure {
          "children": [
            PT_Literal {
              "str": "INPUT[text:nested['object']]",
              "token": {
                "literal": "object",
                "range": {
                  "from": 19,
                  "to": 24,
                },
                "type": "WORD",
              },
              "type": "LITERAL",
            },
          ],
          "endLiteral": PT_Literal {
            "str": "INPUT[text:nested['object']]",
            "token": {
              "literal": "]",
              "range": {
                "from": 26,
                "to": 26,
              },
              "type": "]",
            },
            "type": "LITERAL",
          },
          "startLiteral": PT_Literal {
            "str": "INPUT[text:nested['object']]",
            "token": {
              "literal": "[",
              "range": {
                "from": 17,
                "to": 17,
              },
              "type": "[",
            },
            "type": "LITERAL",
          },
          "str": "INPUT[text:nested['object']]",
          "type": "CLOSURE",
        },
      ],
      "endLiteral": PT_Literal {
        "str": "INPUT[text:nested['object']]",
        "token": {
          "literal": "]",
          "range": {
            "from": 27,
            "to": 27,
          },
          "type": "]",
        },
        "type": "LITERAL",
      },
      "startLiteral": PT_Literal {
        "str": "INPUT[text:nested['object']]",
        "token": {
          "literal": "[",
          "range": {
            "from": 5,
            "to": 5,
          },
          "type": "[",
        },
        "type": "LITERAL",
      },
      "str": "INPUT[text:nested['object']]",
      "type": "CLOSURE",
    },
  ],
  "str": "INPUT[text:nested['object']]",
  "tokens": [
    {
      "literal": "INPUT",
      "range": {
        "from": 0,
        "to": 4,
      },
      "type": "WORD",
    },
    {
      "literal": "[",
      "range": {
        "from": 5,
        "to": 5,
      },
      "type": "[",
    },
    {
      "literal": "text",
      "range": {
        "from": 6,
        "to": 9,
      },
      "type": "WORD",
    },
    {
      "literal": ":",
      "range": {
        "from": 10,
        "to": 10,
      },
      "type": ":",
    },
    {
      "literal": "nested",
      "range": {
        "from": 11,
        "to": 16,
      },
      "type": "WORD",
    },
    {
      "literal": "[",
      "range": {
        "from": 17,
        "to": 17,
      },
      "type": "[",
    },
    {
      "literal": "object",
      "range": {
        "from": 19,
        "to": 24,
      },
      "type": "WORD",
    },
    {
      "literal": "]",
      "range": {
        "from": 26,
        "to": 26,
      },
      "type": "]",
    },
    {
      "literal": "]",
      "range": {
        "from": 27,
        "to": 27,
      },
      "type": "]",
    },
    {
      "literal": "eof",
      "range": {
        "from": 28,
        "to": 28,
      },
      "type": "EOF",
    },
  ],
  "type": "ROOT",
}
`;

exports[`ast parser tests unclosed closure test 1`] = `
"[MB_PARSING_ERROR] "failed to parse" caused by "Encountered invalid token. Active closure is not the closure that this token closes. You probably forgot a ')' somewhere in font of this token."
hello world[this is a message to all (people]test)b
                                            ^
"
`;

exports[`tokenizer tests tokenize all simple tokens 1`] = `
[
  {
    "literal": "(",
    "range": {
      "from": 0,
      "to": 0,
    },
    "type": "(",
  },
  {
    "literal": ")",
    "range": {
      "from": 1,
      "to": 1,
    },
    "type": ")",
  },
  {
    "literal": "[",
    "range": {
      "from": 2,
      "to": 2,
    },
    "type": "[",
  },
  {
    "literal": "]",
    "range": {
      "from": 3,
      "to": 3,
    },
    "type": "]",
  },
  {
    "literal": ":",
    "range": {
      "from": 4,
      "to": 4,
    },
    "type": ":",
  },
  {
    "literal": "#",
    "range": {
      "from": 5,
      "to": 5,
    },
    "type": "#",
  },
  {
    "literal": ",",
    "range": {
      "from": 6,
      "to": 6,
    },
    "type": ",",
  },
  {
    "literal": ".",
    "range": {
      "from": 7,
      "to": 7,
    },
    "type": ".",
  },
  {
    "literal": "eof",
    "range": {
      "from": 8,
      "to": 8,
    },
    "type": "EOF",
  },
]
`;

exports[`tokenizer tests tokenize complex quotes 1`] = `
[
  {
    "literal": "hello world",
    "range": {
      "from": 0,
      "to": 10,
    },
    "type": "WORD",
  },
  {
    "literal": "(",
    "range": {
      "from": 11,
      "to": 11,
    },
    "type": "(",
  },
  {
    "literal": "this is a message to all people []",
    "range": {
      "from": 13,
      "to": 46,
    },
    "type": "WORD",
  },
  {
    "literal": " test ",
    "range": {
      "from": 48,
      "to": 53,
    },
    "type": "WORD",
  },
  {
    "literal": "[",
    "range": {
      "from": 54,
      "to": 54,
    },
    "type": "[",
  },
  {
    "literal": "]",
    "range": {
      "from": 55,
      "to": 55,
    },
    "type": "]",
  },
  {
    "literal": " ",
    "range": {
      "from": 56,
      "to": 56,
    },
    "type": "WORD",
  },
  {
    "literal": ":",
    "range": {
      "from": 58,
      "to": 58,
    },
    "type": "WORD",
  },
  {
    "literal": ")",
    "range": {
      "from": 60,
      "to": 60,
    },
    "type": ")",
  },
  {
    "literal": "eof",
    "range": {
      "from": 61,
      "to": 61,
    },
    "type": "EOF",
  },
]
`;

exports[`tokenizer tests tokenize simple mix of tokens and words 1`] = `
[
  {
    "literal": "hello world",
    "range": {
      "from": 0,
      "to": 10,
    },
    "type": "WORD",
  },
  {
    "literal": "(",
    "range": {
      "from": 11,
      "to": 11,
    },
    "type": "(",
  },
  {
    "literal": "this is a message to all people",
    "range": {
      "from": 12,
      "to": 42,
    },
    "type": "WORD",
  },
  {
    "literal": ")",
    "range": {
      "from": 43,
      "to": 43,
    },
    "type": ")",
  },
  {
    "literal": "eof",
    "range": {
      "from": 44,
      "to": 44,
    },
    "type": "EOF",
  },
]
`;

exports[`tokenizer tests tokenize simple quotes 1`] = `
[
  {
    "literal": "hello world(this is a message to all people)",
    "range": {
      "from": 1,
      "to": 44,
    },
    "type": "WORD",
  },
  {
    "literal": "eof",
    "range": {
      "from": 46,
      "to": 46,
    },
    "type": "EOF",
  },
]
`;

exports[`tokenizer tests tokenize simple word 1`] = `
[
  {
    "literal": "hello world",
    "range": {
      "from": 0,
      "to": 10,
    },
    "type": "WORD",
  },
  {
    "literal": "eof",
    "range": {
      "from": 11,
      "to": 11,
    },
    "type": "EOF",
  },
]
`;
